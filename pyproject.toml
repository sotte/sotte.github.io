[tool.poetry]
name = "nodata_science"
version = "0.1.0"
description = "TODO: fill me in"
authors = ["Stefan Otte <stefan.otte@gmail.com>"]
readme = "README.md"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# [tool.poetry.scripts]
# yourcli = "nodata_science.__main__:main"

[tool.poetry.dependencies]
python = "^3.11"
mistune = "^3.0.2"
jinja2 = "^3.1.3"
python-frontmatter = "^1.1.0"
ghp-import = "^2.1.0"
pygments = "^2.17.2"
rich = "^13.7.0"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.4"
pre-commit = ">=3.5"
pytest-watcher = ">=0.3"
pyright = ">=1.1.337"
ruff = ">=0.1.6"
poethepoet = ">=0.24.4"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra --doctest-modules"

[tool.ruff]
# https://docs.astral.sh/ruff/configuration/
target-version = "py310"

[tool.ruff.format]
preview = true

[tool.ruff.lint]
preview = true
# Check available linters with `ruff linter`
select = [
  "B",   # flake8-bugbear
  "D",   # pydocstyle
  "E",   # pycodestyle
  "F",   # pyflakes
  "I",   # isort
  "PD",  # pandas-vet
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "UP",  # pyupgrade
  "W",   # pydocstyle
]
ignore = [
  # "D100",
  # "D101",
  # "D102",
  "D103",
  # "D104",
  # "D105",
  # "D106",
  # "D107",
  # "D202",
  # "D301",
  # "D419",
  # "E501",
  # "PD901",
]
[tool.ruff.lint.per-file-ignores]
"nodata_science/**/__init__.py" = [
  "D104", # Missing docstring in public package
]
"tests/**/*.py" = [
  "D100", # Missing docstring in public module
  "D103", # Missing docstring in public function
]

[tool.ruff.lint.pycodestyle]
max-line-length = 120 # more relaxed settings for doctests

[tool.ruff.pydocstyle]
convention = "google"

[tool.pyright]
venvPath = "."
venv = ".venv"

################################################################################
# POE TASK DEFINITIONS
# the order matters
[tool.poe.tasks]

[tool.poe.tasks.devserver]
help = "Run http server for development"
cmd = "python -m http.server --directory out/"

[tool.poe.tasks.devgen]
help = "Generate the site on file changes"
shell = "fd . ./content/ ./templates/ | entr python mksite.py"

[tool.poe.tasks.prodgen]
help = "Generate the site"
shell = "python mksite.py"

[tool.poe.tasks.prodghp]
help = "Move out/ to the github-pages branch locally"
shell = "ghp-import --no-jekyll --cname=nodata.science --no-history --force out/"

[tool.poe.tasks.prodpush]
help = "git push github-pages branch to github"
shell = "git push --force origin gh-pages"

[tool.poe.tasks.proddeploy]
help = "Do all the deploy steps"
sequence = ["clean", "prodgen", "prodghp", "prodpush"]

[tool.poe.tasks.chores]
help = "Run all chores on the code base"
sequence = ["lint", "format", "types", "test"]

[tool.poe.tasks.test]
help = "Run tests"
cmd = "pytest"

[tool.poe.tasks.format]
help = "Format the code"
cmd = "ruff format"

[tool.poe.tasks.lint]
help = "Lint the code"
cmd = "ruff check --fix"

[tool.poe.tasks.types]
help = "Type check the code"
cmd = "pyright nodata_science tests"

[tool.poe.tasks.pre-commit]
help = "Run all pre-commit checks"
cmd = "pre-commit run --all-files"

[tool.poe.tasks.clean]
help = "Remove generated files"
cmd = """
  rm -rf
  .coverage
  .mypy_cache
  .pytest_cache
  ./nodata_science/**/__pycache__
  dist
  htmlcov
  out/
  """
